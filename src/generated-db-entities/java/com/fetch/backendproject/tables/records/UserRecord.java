/*
 * This file is generated by jOOQ.
 */
package com.fetch.backendproject.tables.records;


import com.fetch.backendproject.tables.User;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends TableRecordImpl<UserRecord> implements Record3<String, Integer, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>user.payer</code>.
     */
    public UserRecord setPayer(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>user.payer</code>.
     */
    public String getPayer() {
        return (String) get(0);
    }

    /**
     * Setter for <code>user.points</code>.
     */
    public UserRecord setPoints(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>user.points</code>.
     */
    public Integer getPoints() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>user.timestamp</code>.
     */
    public UserRecord setTimestamp(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>user.timestamp</code>.
     */
    public LocalDateTime getTimestamp() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Integer, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return User.USER.PAYER;
    }

    @Override
    public Field<Integer> field2() {
        return User.USER.POINTS;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return User.USER.TIMESTAMP;
    }

    @Override
    public String component1() {
        return getPayer();
    }

    @Override
    public Integer component2() {
        return getPoints();
    }

    @Override
    public LocalDateTime component3() {
        return getTimestamp();
    }

    @Override
    public String value1() {
        return getPayer();
    }

    @Override
    public Integer value2() {
        return getPoints();
    }

    @Override
    public LocalDateTime value3() {
        return getTimestamp();
    }

    @Override
    public UserRecord value1(String value) {
        setPayer(value);
        return this;
    }

    @Override
    public UserRecord value2(Integer value) {
        setPoints(value);
        return this;
    }

    @Override
    public UserRecord value3(LocalDateTime value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public UserRecord values(String value1, Integer value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    @ConstructorProperties({ "payer", "points", "timestamp" })
    public UserRecord(String payer, Integer points, LocalDateTime timestamp) {
        super(User.USER);

        setPayer(payer);
        setPoints(points);
        setTimestamp(timestamp);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(com.fetch.backendproject.tables.pojos.User value) {
        super(User.USER);

        if (value != null) {
            setPayer(value.getPayer());
            setPoints(value.getPoints());
            setTimestamp(value.getTimestamp());
        }
    }
}
